start state: METHOD_BODY
!= :

% :

&& :

( :

) :

* :

+ :

- :

/ :

; :

< :

<= :

= :

== :

> :

>= :

ASSIGNMENT :
IDENTIFIER = EXPRESSION ; 

DECLARATION :
PRIMITIVE_TYPE IDENTIFIER ; 

EXPRESSION :
NUMBER EXPRESSION' 
IDENTIFIER EXPRESSION' 
( EXPRESSION ) EXPRESSION' 

EXPRESSION' :
INFIX_OPERATOR EXPRESSION EXPRESSION' 
\L 

IDENTIFIER :

IF :
if ( NUMBER EXPRESSION' ) { STATEMENT } else { STATEMENT } 
if ( IDENTIFIER EXPRESSION' ) { STATEMENT } else { STATEMENT } 
if ( ( EXPRESSION ) EXPRESSION' ) { STATEMENT } else { STATEMENT } 

INFIX_OPERATOR :
+ 
- 
* 
/ 
% 
< 
> 
<= 
>= 
== 
!= 
\| 
&& 

METHOD_BODY :
STATEMENT_LIST 

NUMBER :

PRIMITIVE_TYPE :
int 
float 

STATEMENT :
WHILE 
IDENTIFIER = NUMBER EXPRESSION' ; 
IDENTIFIER = IDENTIFIER EXPRESSION' ; 
IDENTIFIER = ( EXPRESSION ) EXPRESSION' ; 
if ( NUMBER EXPRESSION' ) { STATEMENT } else { STATEMENT } 
if ( IDENTIFIER EXPRESSION' ) { STATEMENT } else { STATEMENT } 
if ( ( EXPRESSION ) EXPRESSION' ) { STATEMENT } else { STATEMENT } 
int IDENTIFIER ; 
float IDENTIFIER ; 

STATEMENT_LIST :
WHILE STATEMENT_LIST 
IDENTIFIER = NUMBER EXPRESSION' ; STATEMENT_LIST 
IDENTIFIER = IDENTIFIER EXPRESSION' ; STATEMENT_LIST 
IDENTIFIER = ( EXPRESSION ) EXPRESSION' ; STATEMENT_LIST 
if ( NUMBER EXPRESSION' ) { STATEMENT } else { STATEMENT } STATEMENT_LIST 
if ( IDENTIFIER EXPRESSION' ) { STATEMENT } else { STATEMENT } STATEMENT_LIST 
if ( ( EXPRESSION ) EXPRESSION' ) { STATEMENT } else { STATEMENT } STATEMENT_LIST 
int IDENTIFIER ; STATEMENT_LIST 
float IDENTIFIER ; STATEMENT_LIST 
WHILE 
IDENTIFIER = NUMBER EXPRESSION' ; 
IDENTIFIER = IDENTIFIER EXPRESSION' ; 
IDENTIFIER = ( EXPRESSION ) EXPRESSION' ; 
if ( NUMBER EXPRESSION' ) { STATEMENT } else { STATEMENT } 
if ( IDENTIFIER EXPRESSION' ) { STATEMENT } else { STATEMENT } 
if ( ( EXPRESSION ) EXPRESSION' ) { STATEMENT } else { STATEMENT } 
int IDENTIFIER ; 
float IDENTIFIER ; 

WHILE :
while ( ( EXPRESSION ) EXPRESSION' ) { WHILE } 
while ( ( EXPRESSION ) EXPRESSION' ) { IDENTIFIER = NUMBER EXPRESSION' ; } 
while ( ( EXPRESSION ) EXPRESSION' ) { IDENTIFIER = IDENTIFIER EXPRESSION' ; } 
while ( ( EXPRESSION ) EXPRESSION' ) { IDENTIFIER = ( EXPRESSION ) EXPRESSION' ; } 
while ( ( EXPRESSION ) EXPRESSION' ) { if ( NUMBER EXPRESSION' ) { STATEMENT } else { STATEMENT } } 
while ( ( EXPRESSION ) EXPRESSION' ) { if ( IDENTIFIER EXPRESSION' ) { STATEMENT } else { STATEMENT } } 
while ( ( EXPRESSION ) EXPRESSION' ) { if ( ( EXPRESSION ) EXPRESSION' ) { STATEMENT } else { STATEMENT } } 
while ( ( EXPRESSION ) EXPRESSION' ) { int IDENTIFIER ; } 
while ( ( EXPRESSION ) EXPRESSION' ) { float IDENTIFIER ; } 
while ( IDENTIFIER EXPRESSION' ) { WHILE } 
while ( IDENTIFIER EXPRESSION' ) { IDENTIFIER = NUMBER EXPRESSION' ; } 
while ( IDENTIFIER EXPRESSION' ) { IDENTIFIER = IDENTIFIER EXPRESSION' ; } 
while ( IDENTIFIER EXPRESSION' ) { IDENTIFIER = ( EXPRESSION ) EXPRESSION' ; } 
while ( IDENTIFIER EXPRESSION' ) { if ( NUMBER EXPRESSION' ) { STATEMENT } else { STATEMENT } } 
while ( IDENTIFIER EXPRESSION' ) { if ( IDENTIFIER EXPRESSION' ) { STATEMENT } else { STATEMENT } } 
while ( IDENTIFIER EXPRESSION' ) { if ( ( EXPRESSION ) EXPRESSION' ) { STATEMENT } else { STATEMENT } } 
while ( IDENTIFIER EXPRESSION' ) { int IDENTIFIER ; } 
while ( IDENTIFIER EXPRESSION' ) { float IDENTIFIER ; } 
while ( NUMBER EXPRESSION' ) { WHILE } 
while ( NUMBER EXPRESSION' ) { IDENTIFIER = NUMBER EXPRESSION' ; } 
while ( NUMBER EXPRESSION' ) { IDENTIFIER = IDENTIFIER EXPRESSION' ; } 
while ( NUMBER EXPRESSION' ) { IDENTIFIER = ( EXPRESSION ) EXPRESSION' ; } 
while ( NUMBER EXPRESSION' ) { if ( NUMBER EXPRESSION' ) { STATEMENT } else { STATEMENT } } 
while ( NUMBER EXPRESSION' ) { if ( IDENTIFIER EXPRESSION' ) { STATEMENT } else { STATEMENT } } 
while ( NUMBER EXPRESSION' ) { if ( ( EXPRESSION ) EXPRESSION' ) { STATEMENT } else { STATEMENT } } 
while ( NUMBER EXPRESSION' ) { int IDENTIFIER ; } 
while ( NUMBER EXPRESSION' ) { float IDENTIFIER ; } 

\L :

\| :

else :

float :

if :

int :

while :

{ :

} :

